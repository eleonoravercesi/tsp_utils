"""
This module contains functions that work both for the symmetric and asymmetric TSP.
Author: Eleonora Vercesi
Date: Sept 2025
"""
import subprocess
import os

def run_LKH(file, seed = 42, lkh3_path = None):
    """
    Run LKH3 on a given instance file.

    Parameters
    ----------
    file : str
        Path to the TSP instance file in TSPLIB format.
    lkh3_path : str
        Path to the directory where LKH3 is installed.
    """
    # Check if LKH3 is installed
    print("Checking if LKH3 exists")
    try:
        assert os.path.exists(lkh3_path)
    except:
        raise ValueError(
            "LKH3 not found, please install it from http://webhotel4.ruc.dk/~keld/research/LKH-3/ or specify the correct path")
    # Create a directory for the solution (if does not exist yes)
    try:
        os.makedirs('sol')
    except:
        pass

    # Create a directory where put all the intermediate files generated by concorde and the ones needed for LKH3 (if does not exists)
    try:
        os.makedirs('run')
    except:
        pass
    os.chdir("./run")

    # Set a name for the solution file (derived from the original name)
    solution_filename = "../sol/{}.sol".format(file.split(".")[0])

    # Add an extra-dot to the instance, as we are in the folder "run"
    if file[0] == '.':
        instance_path = "." + file
    else:
        instance_path = "../" + file

    # Create a LKH3 par file in the run folder
    with open("LKH.par", "w") as f:
        f.write("PROBLEM_FILE = {}\n".format(instance_path))
        f.write("SEED = {}\n".format(seed))
        f.write("RUNS = 1\n")

    # Run LKH3 on the instance
    print("Running LKH3 on instance", instance_path)
    subprocess.run("{} LKH.par > logL.log".format(lkh3_path), shell=True)

    # Parse the log
    with open("logL.log", "r") as f:
        lines = f.readlines()
    # Lines -2 is the last filled line
    #Cost.min = 26, Cost.avg = 26.00, Cost.max = 26
    # Gap.min = 0.0000%, Gap.avg = 0.0000%, Gap.max = 0.0000%
    # Trials.min = 0, Trials.avg = 0.0, Trials.max = 0
    # Time.min = 0.00 sec., Time.avg = 0.00 sec., Time.max = 0.00 sec.
    # Time.total = 0.00 sec.
    runtime = float(lines[-2].split(" = ")[1].split("sec")[0])
    trials_line = lines[-4].split(",")
    trials = [float(x.split(" = ")[1]) for x in trials_line]
    trials = dict(zip(["min", "avg", "max"], trials))
    cost_line = lines[-6].split(",")
    costs = [float(x.split(" = ")[1]) for x in cost_line]
    costs = dict(zip(["min", "avg", "max"], costs))

    # Get back to the original folder
    os.chdir("../")

    # Remove the run folder
    try:
        subprocess.run("rm -r run", shell=True)
    except:
        pass

    # Remove the sol folder
    try:
        subprocess.run("rm -r sol", shell=True)
    except:
        pass

    return costs, trials, runtime



